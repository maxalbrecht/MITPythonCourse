WEEK 4, LECTURE 8

VIDEO 1

"Today, we're going to talk about the use of exceptions
and the use of assertions, both to accomplish defensive
programming and to let you actually control how the
computer reacts when something goes in an unexpected
way."

What happens when procedure execution hits an unexpected
condition?
-> you get an exception... to what was expected.
e.g.:

*trying to access beyond list limits
    test = [1,7,4]
    test[4]
    -> IndexError
*trying to convert an inappropriate type
    int(test)
    -> TypeError
*referencing a non-existing variable
    a
    ->NameError
*mixing data types without coercion
    'a'/4
    -> TypeError
    
#####################
VIDEO 2

OTHER TYPES OF EXCEPTIONS

*already seen common error types:
    * SyntaxError: Python can't parse program
    * NameError: local or global name not found
    *AttributeError: attribute reference fails
    *TypeError: operand doesn't have correct type
    *ValueError: operand type okay, but value is illegal
    * IOError: IO system reports malfunction
        (e.g. file not found)
###

WHAT TO DO WITH EXCEPTIONS?

*could fail silently:
    * substitute default values or just continue
    * bad idea!!!! user gets no warning

* return an "error value"
    * what value to choose?
    * complicates code having to check for a special value

*stop execution, signal error condition
    *in Python: raise an exception
        raise Exception("descriptive string")
###

DEALING WITH EXCEPTIONS

* Python code can provide HANDLERS for exceptions

e.g.:
    try:
        a = int(input("Tell me one number:"))
        b = int(input("Tell me another number:"))
        print (a/b)
        print ("Okay")
    except:
        print ("Bug in user input.")
    print("Outside")

* exceptions RAISED by any statement in body of TRY are HANDLED
  by the EXCEPT statement and execution continues after
  the body of the except statement.
###

HANDLING SPECIFIC EXCEPTIONS

* have SEPARATE EXCEPT CLAUSES to deal with a particular
  type of exception

e.g.:
    try:
        a = int(input("Tell me one number:"))
        b = int(input("Tell me another number:"))
        print "a/b = ", a/b)
        print("a+b = ", a+b)
    except ValueError:
        print("Could not convert to a number.")
    except ZeroDivisionError:
        print("Can't divide by zero")
    except:
        prrint("Something went very wrong.")
###

OTHER EXCEPTIONS

* else:
    * body of this is executed when execution of
      associated TRY body COMPLETES WITH NO EXCEPTIONS
* finally:
    * body of this is ALWAYS EXCECUTED after
      TRY, ELSE, and EXCEPT clauses, even if they raised
      another error or executed a BREAK, CONTINUE
      or RETURN
    * useful for clean-up code that should be run no matter
      what else happened (e.g. close a file)
#######################################################################

VIDEO 3
Exceptions Examples

EXAMPLE: EXCEPTION USAGE

Let's say that we would like to ask the user for an interger. Instead
of re-running all the code until this is done correctly,we can create
a loop in which we keep asking for that input until it is done
correctly:

while True:
    try:
        n = input("Please enter an integer: ")
        n = int(n)
        break
    except ValueError:
        print("Input not an integer; try again")
print("Correct input of an integer!")
###

EXAMPLE: CONTROL INPUT

Let's say you want the user to provide a file name, and then do
something to the data in that file:

data = []
file_name = input("provide a name of a file of data"

try:
    fh = open(file_name, 'r')
except IOError:
  print("cannot open ", file_name)
else:
    for new in fh:
        if new != "\n":
            addIt = new[:-1].split(",") #remove trailing \n  
            data.append(addIt)
finally:
    fh.close() # close file even if fail
.
.
.
further into this example. Not terribly extensible, so skipping rest of this video.

#######################################################################

VIDEO 4
Exceptions as Control Flow

* Don't return special values when an error occured and then check whether 
  "error value" was returned

* Instead, raise an exception when unable to produce a result consistent with
  the function's specification
  
raise <exceptionName> (<arguments>)
raise ValueError("something is wrong")

...
Example with just exception handlers
...

...
Another example with just exception handlers
...

So, we can either HANDLE errors, or we can RAISE errors

#######################################################################

VIDEO 5

Assertions as Defensive programming

* While assertions don't allow a programmer to control response to unexpected
conditions, they are a great method for ensuring that execution halts when
an expected condition is not met

* Typically used to ched inputs to procedures, but can be used anywhere

* Can make it easier to locate the source of a bug

###

eg.:

def avg(grades, wights):
    assert not len(grades) == 0,'no grades data'
    newgr = [convertLetterGrade(elt) for elt in grades]
    return dotProduct(newgr, weights)/ len(newgr)
    
###

EXTENDING USE OF ASSERTIONS 

    * While pre-conditions on inputs are valuable to check, can also apply
      post-conditions on outputs before proceeding ot the next stage
     
def avg (grades, weights):
    assert not len(grades) == 0, 'no grades data'
    assert len(grades) == len(weights), 'wrong number of grades'
    
    newgr = [converLetterGrade(elt) for elt in grades]
    result = dotProduct9newgr, weights)/len(newgr)
    
    asert 0.0 <= result <= 100.0 ## ************* THIS IS OUR POST-CONDITION
    
    return result

###

WHERE TO USE ASSERTIONS?

* Goal is to spot bugs early and mae clear where they happened
    * Easier to debug when when we catch them at the first point of contact,
      instead of trying to trace them down later
      
* Not to be used in place of testing, but as a supplement to testing

* Should probably rely on raising exceptions if user supplies bad data input,
  and use assertins for the following:
    * Cheing types of arguments or values
    * Checking that invariants on data structions are met
    * Checking constraints on return values
    * Checking for violations of constraints on procedure 
      (e.g. no duplicates in a list)

























