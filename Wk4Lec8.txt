WEEK 4, LECTURE 8

VIDEO 1

"Today, we're going to talk about the use of exceptions
and the use of assertions, both to accomplish defensive
programming and to elt you actually control how the
computer reacts when something goes in an unexpected
way."

What happens when procedure execution hits an unexpected
condition?
-> you get an exception... to what was excpeted.
e.g.:

*trying to access beyong list limits
    test = [1,7,4]
    test[4]
    -> IndexError
*trying to convert an inappropriate type
    int(test)
    -> TypeError
*referencing a non-existing variable
    a
    ->NameError
*mixing data types without coercion
    'a'/4
    -> TypeError
###

OTHER TYPES OF EXCEPTIONS]

*already seen common error types:
    * SyntaxError: Python can't parse program
    * NameError: local or global name not found
    *AttributeError: attribute reference fails
    *TypeError: operand doesn't have correct type
    *ValueError: operand type okay, but value is illegal
    * IOError: IO system reports malfunction
        (e.g. file not found)
###

WHAT TO DO WITH EXCEPTIONS?

*could fail silently:
    * substitute default values or just continue
    * bad idea!!!! user gets no warning

* return an "error value
    * waht value to choose?
    * complicates code having to check for a special value

*stop execution, signal error condition
    *in Python: raise an exception
        raise Exception("descriptive string")
###

DEALING WITH EXCEPTIONS

* Python code can provide HANDLERS for exceptions

e.g.:
    try:
        a = int(input("Tell me one number:"))
        b = int(input("Tell me another number:"))
        print (a/b)
        print ("Okay")
    except:
        print ("Bug in user input.")
    print("Outside")

* exceptions RAISED by any statement in body of TRY are HANDLED
  by the EXCEPT statement and execution continues after
  the body of the except statement.















