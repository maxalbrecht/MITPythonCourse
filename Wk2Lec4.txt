WEEK 2, LECTURE 4

VIDEO 1
Decomposition and Abstraction

Abstraction: think of a black box. you just need to know the input
    and the output

Decomposition: Have separate pieces work together to achieve an
    end goal.
    In other words, I will break up a problem into different self-
    contained pieces. (Once they are built, all I need to know is 
    what is the expected input and what is the expected output.)
###
We will begin with decomposition with functions

###################################################

VIDEO 2
Functions and Scope

A function is a reusable chunk of code
A function has a name and takes parameters
Each function should have a "doc string," i.e. documentation
    that tells me what the function does
The BODY of the function is the sequence of commands or instructions
    that we want to have happen
    
######
HOW TO WRITE AND CALL A FUNCTION
e.g. 1:
#
def is_even(i):
    """
    Input: i, a positive int
    Returns True if i is even, otherwise False
    """
    print("hi")
    return i%2 == 0
    
is_even(3)
#
e.g. 2:
def evalQuadratic(a, b, c, x):
    '''
    a, b, c: numerical values for the coefficients of a quadratic equation
    x: numerical value at which to evaluate the quadratic.
    '''
    # Your code here
    print(
        a*(x**2)
        +b*x
        +c
    )
    
evalQuadratic(1,2,3,4)
###################################################

VIDEO 3
Calling Functions
e.g. 1:
def f(x):
    x = x+1
    print("in f(x) x equals "+ str(x))
x=5  
f(x)
print(str(x))
#
e.g. 2:
def fa():
    print("inside fa")
def fb(y):
    print("inside fb")
    return y
def fc(z):
    print("inside fc")
    return z()
"""
print(fa())
print(fb(2))
"""
print(
    fc(fa)
)
#
Inside a function we CAN ACCESS a variable defined outsite it
HOWEVER, inside a funciton we CANNOT MODIFY a variable defined
outside it.
e.g.1 will succeed:
def g(y):
    print(x)
    print(x+1)

x=5
g(x)
print(x)    
#
e.g. 2 will not, however, since there is no x defined
    within the funcsiton, and it is therefore trying to modify
    the x declared outside the function, and it does not have rights
    to do so.
def h(y):
    x = x + 1
x=5
h(x)
print(x) 
#
****************
** for Python questions, go to www.pythontutor.com
*****************

###################################################

VIDEO 4
Keyword Arguments and Default Values

To set a default value for a parameter, you set it in the
    definition of the function
e.g.:
def printName(fn, ln, reverse = False):
    if reverse:
        print(ln + ", " + fn)
    else:
        print(fn + " " + ln)

printName("Max", "Albrecht") ## <-- Will use the default, False
printName("Max", "Albrecht", True) ## Here we override the default
###################################################

VIDEO 5
Specification

A Specification is just the description of the function
    or program that is given in the "doc string"
###################################################

VIDEO 6
Iteration vs Recursion

Recursion is a programming technique where a function call itself

EXAMPLE OF FACTORIAL OPERATION, ITERATIVE VS RECURSIVE:
##Iterative Version:
    
def factorial_inter(n):
    prod = 1
    for i in range (1,n+1):
       prod *= i
    return prod

##Recursive Version

def factorial_recursive(n):
    if n==1:
        return 1
    else:
        return (
            n
            *factorial_recursive(n-1)
        )
        
print(factorial_inter(5))       
print(factorial_recursive(5))
###
e.g. 2, power, recursive method:

def recurPower(base, exp):
    '''
    base: int or float.
    exp: int >= 0
 
    returns: int or float, base^exp
    '''
    # Your code here
    result = 1
    if exp == 0:
        return result
    else:
        return(base* recurPower(base, exp-1))

###################################################

VIDEO 7

Inductive Reasoning

How do you know that a recursive call will terminate?
That is, how can you induce that it will terminate?

    If I want to prove a statement that is indexed on
    intergers, that is, a statement taht is applied to
    a set of intergers, and I want to prove that it is 
    true for all values of some parameter n, I just have
    to prove that it is true when n has its smallest value,
    for example when n is zero or one. Then I just have to
    prove taht it is true for some arbitrary n, as well as
    for n plus  1.

###################################################

VIDEO 8

Towers of Hanoi

###################################################

VIDEO 9

Fibonacci Series

###################################################

VIDEO 10

Recursion on non-numberics


























